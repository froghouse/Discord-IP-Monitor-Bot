# Project configuration for Discord IP Monitor Bot

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "discord-ip-monitor-bot"
version = "1.0.0"
description = "A Discord bot for monitoring public IP address changes"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Discord IP Monitor Bot Contributors"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Communications :: Chat",
    "Topic :: System :: Networking :: Monitoring",
]
requires-python = ">=3.11"
dependencies = [
    "aiohappyeyeballs==2.6.1",
    "aiohttp==3.11.16",
    "aiosignal==1.3.2",
    "anyio==4.9.0",
    "attrs==25.3.0",
    "audioop-lts==0.2.1",
    "certifi==2025.1.31",
    "charset-normalizer==3.4.1",
    "discord.py==2.5.2",
    "frozenlist==1.5.0",
    "h11==0.14.0",
    "httpcore==1.0.8",
    "httpx==0.28.1",
    "idna==3.10",
    "isort==6.0.1",
    "multidict==6.4.3",
    "propcache==0.3.1",
    "python-dotenv==1.1.0",
    "ruff==0.11.5",
    "sniffio==1.3.1",
    "urllib3==2.4.0",
    "yarl==1.19.0",
]

[project.optional-dependencies]
test = [
    "pytest==8.3.4",
    "pytest-asyncio==0.24.0",
    "pytest-mock==3.14.0",
    "pytest-cov==6.0.0",
    "pytest-xdist==3.8.0",
]
dev = [
    "pre-commit==3.6.0",
    "bandit[toml]==1.7.6",
    "safety==3.0.1",
    "detect-secrets==1.5.0",
]

[project.scripts]
discord-ip-monitor = "main:main"

[project.urls]
Homepage = "https://github.com/yourusername/Discord-IP-Monitor-Bot"
Repository = "https://github.com/yourusername/Discord-IP-Monitor-Bot"
Issues = "https://github.com/yourusername/Discord-IP-Monitor-Bot/issues"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
extend-exclude = [
    ".venv",
    "__pycache__",
    "*.pyc",
    ".pytest_cache",
    "htmlcov",
    "dist",
    "build",
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "I",      # isort
    "N",      # pep8-naming
    "C90",    # mccabe
    "PL",     # Pylint
    "RUF",    # Ruff-specific rules
    "S",      # flake8-bandit (security)
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "PIE",    # flake8-pie
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
]

ignore = [
    "S101",   # Allow assert statements (used in tests)
    "S105",   # Allow hardcoded password strings (for examples)
    "S106",   # Allow hardcoded password function args
    "S107",   # Allow hardcoded password default args
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "T201",   # Allow print statements
    "EM101",  # Raw string in exception
    "EM102",  # f-string in exception
    "RUF012", # Mutable class attributes
]

# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Tests can use more relaxed rules
"tests/**/*.py" = [
    "S101",    # Allow assert in tests
    "S311",    # Allow standard pseudo-random generators in tests
    "DTZ005",  # Allow datetime without timezone in tests
    "PLR2004", # Allow magic values in tests
    "SLF001",  # Allow private member access in tests
    "PT011",   # Allow pytest.raises without match
    "B018",    # Allow expressions in tests
]

# Configuration files can have longer lines
"conftest.py" = ["E501"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["ip_monitor"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Bandit configuration for security scanning
[tool.bandit]
exclude_dirs = ["tests", ".venv", "htmlcov"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Coverage configuration
[tool.coverage.run]
source = ["ip_monitor"]
branch = true  # Enable branch coverage for more comprehensive analysis
omit = [
    "tests/*",
    ".venv/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]
concurrency = ["thread", "multiprocessing"]  # Support for parallel execution

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # Add more specific exclusions for test optimization
    "if TYPE_CHECKING:",
    "\\.\\.\\.",  # Ellipsis in abstract methods
    "pass",      # Pass statements in abstract methods
]
show_missing = true
skip_covered = false
precision = 2  # Show coverage to 2 decimal places
sort = "-cover"  # Sort by coverage percentage (lowest first)

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true  # Show which tests cover which lines
skip_covered = false
skip_empty = false

[tool.coverage.xml]
output = "coverage.xml"  # Generate XML report for CI/CD

# MyPy configuration (optional - for future type checking)
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start relaxed, can tighten later
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true

# Pytest configuration (supplements pytest.ini)
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]