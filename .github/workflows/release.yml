name: Release & Deployment

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.0.0 or v1.0.0-beta"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run full test suite
      run: |
        pytest --cov=ip_monitor --cov-report=xml -v
        
    - name: Validate bot can start
      run: |
        python -c "
        import os
        from unittest.mock import patch
        
        test_env = {
            'DISCORD_BOT_TOKEN': 'test_token',
            'CHANNEL_ID': '123456789',
            'DB_FILE': 'test.db',
            'TESTING_MODE': 'true'
        }
        
        with patch.dict(os.environ, test_env):
            from ip_monitor.config import AppConfig
            config = AppConfig()
            print('✅ Bot configuration validation passed')
        "

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install -r requirements.txt
        
    - name: Create source distribution
      run: |
        # Create a simple setup.py for distribution
        cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()
        
        with open("requirements.txt", "r", encoding="utf-8") as fh:
            requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]
        
        setup(
            name="discord-ip-monitor-bot",
            version="${{ needs.validate-release.outputs.version }}".lstrip('v'),
            author="Discord IP Monitor Bot",
            description="A Discord bot for monitoring public IP address changes",
            long_description=long_description,
            long_description_content_type="text/markdown",
            packages=find_packages(),
            classifiers=[
                "Development Status :: 4 - Beta",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.12",
                "Programming Language :: Python :: 3.13",
                "Topic :: Communications :: Chat",
                "Topic :: System :: Networking :: Monitoring",
            ],
            python_requires=">=3.11",
            install_requires=requirements,
            entry_points={
                "console_scripts": [
                    "discord-ip-monitor=main:main",
                ],
            },
        )
        EOF
        
    - name: Build package
      run: |
        python -m build
        
    - name: Create deployment archive
      run: |
        # Create a deployment-ready archive
        mkdir -p discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}
        
        # Copy source files
        cp -r ip_monitor/ discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/
        cp main.py discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/
        cp requirements.txt discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/
        cp pytest.ini discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/
        cp README.md discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/
        cp LICENSE discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/
        
        # Copy documentation
        cp *.md discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/ || true
        
        # Create example configuration
        cat > discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/.env.example << 'EOF'
        # Discord Bot Configuration
        DISCORD_BOT_TOKEN=your_bot_token_here
        CHANNEL_ID=your_channel_id_here
        
        # Database Configuration
        DB_FILE=ip_monitor.db
        
        # Monitoring Configuration
        CHECK_INTERVAL=300
        MAX_RETRIES=3
        RETRY_DELAY=30
        
        # Optional: Advanced Settings
        CIRCUIT_BREAKER_ENABLED=true
        MESSAGE_QUEUE_ENABLED=true
        CACHE_ENABLED=true
        STARTUP_MESSAGE_ENABLED=true
        
        # Optional: Logging
        LOG_LEVEL=INFO
        EOF
        
        # Create startup script
        cat > discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/start.sh << 'EOF'
        #!/bin/bash
        # Discord IP Monitor Bot Startup Script
        
        # Check if virtual environment exists
        if [ ! -d "venv" ]; then
            echo "Creating virtual environment..."
            python3 -m venv venv
        fi
        
        # Activate virtual environment
        source venv/bin/activate
        
        # Install/update dependencies
        echo "Installing dependencies..."
        pip install -r requirements.txt
        
        # Run the bot
        echo "Starting Discord IP Monitor Bot..."
        python main.py
        EOF
        chmod +x discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/start.sh
        
        # Create archive
        tar -czf discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}.tar.gz discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/
        zip -r discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}.zip discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          dist/
          *.tar.gz
          *.zip
        retention-days: 30

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    timeout-minutes: 5
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^$VERSION$" | head -n 1)
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, generating changelog from beginning"
          COMMIT_RANGE=""
        else
          echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
          COMMIT_RANGE="$PREVIOUS_TAG.."
        fi
        
        # Generate changelog
        echo "## 🚀 What's Changed in $VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits and categorize them
        git log $COMMIT_RANGE --pretty=format:"%h %s" --no-merges | while read commit; do
          if echo "$commit" | grep -qE "^[a-f0-9]+ (feat|feature)"; then
            echo "### ✨ New Features" >> CHANGELOG_TEMP.md
            echo "- $commit" | sed 's/^[a-f0-9]* //' >> CHANGELOG_TEMP.md
          elif echo "$commit" | grep -qE "^[a-f0-9]+ (fix|bugfix)"; then
            echo "### 🐛 Bug Fixes" >> CHANGELOG_TEMP.md
            echo "- $commit" | sed 's/^[a-f0-9]* //' >> CHANGELOG_TEMP.md
          elif echo "$commit" | grep -qE "^[a-f0-9]+ (docs|doc)"; then
            echo "### 📚 Documentation" >> CHANGELOG_TEMP.md
            echo "- $commit" | sed 's/^[a-f0-9]* //' >> CHANGELOG_TEMP.md
          elif echo "$commit" | grep -qE "^[a-f0-9]+ (test|tests)"; then
            echo "### 🧪 Testing" >> CHANGELOG_TEMP.md
            echo "- $commit" | sed 's/^[a-f0-9]* //' >> CHANGELOG_TEMP.md
          elif echo "$commit" | grep -qE "^[a-f0-9]+ (chore|refactor|style)"; then
            echo "### 🔧 Maintenance" >> CHANGELOG_TEMP.md
            echo "- $commit" | sed 's/^[a-f0-9]* //' >> CHANGELOG_TEMP.md
          else
            echo "### 📝 Other Changes" >> CHANGELOG_TEMP.md
            echo "- $commit" | sed 's/^[a-f0-9]* //' >> CHANGELOG_TEMP.md
          fi
        done
        
        # Organize changelog sections
        if [ -f CHANGELOG_TEMP.md ]; then
          for section in "✨ New Features" "🐛 Bug Fixes" "📚 Documentation" "🧪 Testing" "🔧 Maintenance" "📝 Other Changes"; do
            if grep -q "### $section" CHANGELOG_TEMP.md; then
              echo "" >> CHANGELOG.md
              echo "### $section" >> CHANGELOG.md
              grep -A 100 "### $section" CHANGELOG_TEMP.md | grep "^- " | head -20 >> CHANGELOG.md
            fi
          done
          rm CHANGELOG_TEMP.md
        fi
        
        # Add installation and upgrade instructions
        echo "" >> CHANGELOG.md
        echo "## 📦 Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Download the release archive and follow the setup instructions in README.md" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## ⬆️ Upgrading" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "1. Stop the bot" >> CHANGELOG.md
        echo "2. Backup your configuration and database" >> CHANGELOG.md
        echo "3. Replace the bot files with the new version" >> CHANGELOG.md
        echo "4. Install any new dependencies: \`pip install -r requirements.txt\`" >> CHANGELOG.md
        echo "5. Start the bot" >> CHANGELOG.md
        
        # Set output for GitHub release
        {
          echo 'changelog<<EOF'
          cat CHANGELOG.md
          echo EOF
        } >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, generate-changelog]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: Discord IP Monitor Bot ${{ needs.validate-release.outputs.version }}
        body: ${{ needs.generate-changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
        
    - name: Upload Release Assets
      run: |
        # Upload tar.gz
        if [ -f "discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}.tar.gz" ]; then
          gh release upload ${{ needs.validate-release.outputs.version }} \
            "discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}.tar.gz" \
            --clobber
        fi
        
        # Upload zip
        if [ -f "discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}.zip" ]; then
          gh release upload ${{ needs.validate-release.outputs.version }} \
            "discord-ip-monitor-bot-${{ needs.validate-release.outputs.version }}.zip" \
            --clobber
        fi
        
        # Upload wheel if it exists
        if [ -f "dist/"*.whl ]; then
          gh release upload ${{ needs.validate-release.outputs.version }} dist/*.whl --clobber
        fi
        
        # Upload source distribution
        if [ -f "dist/"*.tar.gz ]; then
          gh release upload ${{ needs.validate-release.outputs.version }} dist/*.tar.gz --clobber
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Update main branch with version info
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Release ${{ needs.validate-release.outputs.version }} completed successfully" >> RELEASES.md
        echo "Release created at $(date -u)" >> RELEASES.md
        
    - name: Notify success
      run: |
        echo "🎉 Release ${{ needs.validate-release.outputs.version }} has been successfully created!"
        echo "📦 Release artifacts are available on the GitHub releases page"
        echo "🔗 https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"